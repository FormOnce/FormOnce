generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
    engineType    = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(uuid())
    email           String            @unique
    name            String
    image           String?
    password        String?
    refreshToken    String?
    avatar          String?
    emailVerified   DateTime?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    WorkspaceMember WorkspaceMember[]
    Account         Account[]
    Session         Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Form {
    id           String         @id
    name         String
    workspaceId  String
    formSchema   Json           @default("{}")
    status       FormStatus     @default(DRAFT)
    link         String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Workspace    Workspace      @relation(fields: [workspaceId], references: [id])
    FormResponse FormResponse[]
}

model FormResponse {
    id        String   @id
    formId    String
    response  Json     @default("{}")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Form      Form     @relation(fields: [formId], references: [id])
}

model Workspace {
    id              String            @id
    name            String            @unique
    apiKey          String            @unique
    icon            String?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    isPersonal      Boolean           @default(true)
    Form            Form[]
    WorkspaceMember WorkspaceMember[]
}

model WorkspaceMember {
    id          String    @id
    role        Role
    userId      String
    workspaceId String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    User        User      @relation(fields: [userId], references: [id])
    Workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

enum FormStatus {
    DRAFT
    PUBLISHED
}

enum Role {
    OWNER
    ADMIN
    MEMBER
}
