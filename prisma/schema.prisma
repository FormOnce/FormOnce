generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
    engineType    = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(uuid())
    email           String            @unique
    name            String
    password        String
    refreshToken    String?
    avatar          String?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime
    WorkspaceMember WorkspaceMember[]
}

model Form {
    id           String         @id
    name         String
    workspaceId  String
    formSchema   Json           @default("{}")
    status       FormStatus     @default(DRAFT)
    link         String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime
    Workspace    Workspace      @relation(fields: [workspaceId], references: [id])
    FormResponse FormResponse[]
}

model FormResponse {
    id        String   @id
    formId    String
    response  Json     @default("{}")
    createdAt DateTime @default(now())
    updatedAt DateTime
    Form      Form     @relation(fields: [formId], references: [id])
}

model Workspace {
    id              String            @id
    name            String            @unique
    apiKey          String            @unique
    icon            String?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime
    isPersonal      Boolean           @default(true)
    Form            Form[]
    WorkspaceMember WorkspaceMember[]
}

model WorkspaceMember {
    id          String    @id
    role        Role
    userId      String
    workspaceId String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime
    User        User      @relation(fields: [userId], references: [id])
    Workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

enum FormStatus {
    DRAFT
    PUBLISHED
}

enum Role {
    OWNER
    ADMIN
    MEMBER
}
